
ESONH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000788  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000007dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000080c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e3d  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007dd  00000000  00000000  0000176d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000981  00000000  00000000  00001f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  000028cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000405  00000000  00000000  00002adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004fa  00000000  00000000  00002ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  000033db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  54:	ca 00       	.word	0x00ca	; ????
  56:	cd 00       	.word	0x00cd	; ????
  58:	d0 00       	.word	0x00d0	; ????
  5a:	d3 00       	.word	0x00d3	; ????
  5c:	d6 00       	.word	0x00d6	; ????
  5e:	d9 00       	.word	0x00d9	; ????
  60:	dc 00       	.word	0x00dc	; ????
  62:	df 00       	.word	0x00df	; ????
  64:	e2 00       	.word	0x00e2	; ????
  66:	e5 00       	.word	0x00e5	; ????
  68:	97 01       	movw	r18, r14
  6a:	97 01       	movw	r18, r14
  6c:	97 01       	movw	r18, r14
  6e:	97 01       	movw	r18, r14
  70:	97 01       	movw	r18, r14
  72:	97 01       	movw	r18, r14
  74:	97 01       	movw	r18, r14
  76:	c7 00       	.word	0x00c7	; ????
  78:	97 01       	movw	r18, r14
  7a:	21 01       	movw	r4, r2
  7c:	c4 00       	.word	0x00c4	; ????
  7e:	97 01       	movw	r18, r14
  80:	97 01       	movw	r18, r14
  82:	97 01       	movw	r18, r14
  84:	97 01       	movw	r18, r14
  86:	1a 01       	movw	r2, r20
  88:	97 01       	movw	r18, r14
  8a:	97 01       	movw	r18, r14
  8c:	97 01       	movw	r18, r14
  8e:	4b 01       	movw	r8, r22
  90:	97 01       	movw	r18, r14
  92:	97 01       	movw	r18, r14
  94:	97 01       	movw	r18, r14
  96:	97 01       	movw	r18, r14
  98:	17 01       	movw	r2, r14
  9a:	c1 00       	.word	0x00c1	; ????
  9c:	09 01       	movw	r0, r18
  9e:	28 01       	movw	r4, r16
  a0:	97 01       	movw	r18, r14
  a2:	be 00       	.word	0x00be	; ????
  a4:	97 01       	movw	r18, r14
  a6:	10 01       	movw	r2, r0
  a8:	e8 00       	.word	0x00e8	; ????

000000aa <__ctors_end>:
  aa:	11 24       	eor	r1, r1
  ac:	1f be       	out	0x3f, r1	; 63
  ae:	cf e5       	ldi	r28, 0x5F	; 95
  b0:	d8 e0       	ldi	r29, 0x08	; 8
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_clear_bss>:
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	a0 e6       	ldi	r26, 0x60	; 96
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
  be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
  c0:	a0 36       	cpi	r26, 0x60	; 96
  c2:	b2 07       	cpc	r27, r18
  c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
  c6:	0e 94 88 00 	call	0x110	; 0x110 <main>
  ca:	0c 94 c2 03 	jmp	0x784	; 0x784 <_exit>

000000ce <__bad_interrupt>:
  ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <UART_init>:
{
	timerOverflow++;
}*/
void UART_init(uint16_t baud_rate)
{
	uint16_t UBRRValue = (F_CPU/16/baud_rate)-1;
  d2:	9c 01       	movw	r18, r24
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	60 e4       	ldi	r22, 0x40	; 64
  da:	72 e4       	ldi	r23, 0x42	; 66
  dc:	8f e0       	ldi	r24, 0x0F	; 15
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 9a 03 	call	0x734	; 0x734 <__udivmodsi4>
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	31 09       	sbc	r19, r1
	UBRRL = (uint8_t)UBRRValue;
  e8:	29 b9       	out	0x09, r18	; 9
	UBRRH = (uint8_t)(UBRRValue>>8);
  ea:	30 bd       	out	0x20, r19	; 32
	UCSRA=(1<<RXC);
  ec:	80 e8       	ldi	r24, 0x80	; 128
  ee:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN)|(1<<TXEN);
  f0:	88 e1       	ldi	r24, 0x18	; 24
  f2:	8a b9       	out	0x0a, r24	; 10
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  f4:	80 b5       	in	r24, 0x20	; 32
  f6:	86 68       	ori	r24, 0x86	; 134
  f8:	80 bd       	out	0x20, r24	; 32
	UCSRC&=~(1<<UMSEL);
  fa:	80 b5       	in	r24, 0x20	; 32
  fc:	8f 7b       	andi	r24, 0xBF	; 191
  fe:	80 bd       	out	0x20, r24	; 32
	UCSRC&=~(1<<USBS);
 100:	80 b5       	in	r24, 0x20	; 32
 102:	87 7f       	andi	r24, 0xF7	; 247
 104:	80 bd       	out	0x20, r24	; 32
 106:	08 95       	ret

00000108 <receiveChar>:
}
char receiveChar()
{
	while(!(UCSRA&(1<<RXC)));
 108:	5f 9b       	sbis	0x0b, 7	; 11
 10a:	fe cf       	rjmp	.-4      	; 0x108 <receiveChar>
	return UDR;
 10c:	8c b1       	in	r24, 0x0c	; 12
}
 10e:	08 95       	ret

00000110 <main>:
		}
	}
}*/
int main(void)
{
	 Initpwm();
 110:	0e 94 9a 01 	call	0x334	; 0x334 <Initpwm>
	 Initpwm1();
 114:	0e 94 9e 01 	call	0x33c	; 0x33c <Initpwm1>
	UART_init(9600);
 118:	80 e8       	ldi	r24, 0x80	; 128
 11a:	95 e2       	ldi	r25, 0x25	; 37
 11c:	0e 94 69 00 	call	0xd2	; 0xd2 <UART_init>
	DDRA = 0b00001111;
 120:	8f e0       	ldi	r24, 0x0F	; 15
 122:	8a bb       	out	0x1a, r24	; 26
	DDRD|=(1<<PIND7);
 124:	8f 9a       	sbi	0x11, 7	; 17
	DDRB|=(1<PINB3);
 126:	b8 9a       	sbi	0x17, 0	; 23
	//TIMSK|=(1<<TOIE0);
	DDRC&=~(1<<7);//right line tracker
 128:	a7 98       	cbi	0x14, 7	; 20
	DDRC&=~(1<<6);//left line tracker
 12a:	a6 98       	cbi	0x14, 6	; 20
	DDRC&=~(1<<5);//middle line tracker
 12c:	a5 98       	cbi	0x14, 5	; 20
	DDRC&=~(1<<4);//Motor shaft encoder
 12e:	a4 98       	cbi	0x14, 4	; 20
	DDRC&=~(1<<3);//infrared sensor 
 130:	a3 98       	cbi	0x14, 3	; 20
			case '3': {OCR0=195; OCR2=195; }break;
			case '4': {OCR0=150; OCR2=150; }break;
			case '5': {OCR0=120; OCR2=120; }break;
			case '6': {OCR0=90; OCR2=90; } break;
			case '7': {OCR0=60; OCR2=60; }break;
			case '8': {OCR0=30; OCR2=30; }break;
 132:	0f 2e       	mov	r0, r31
 134:	fe e1       	ldi	r31, 0x1E	; 30
 136:	bf 2e       	mov	r11, r31
 138:	f0 2d       	mov	r31, r0
			case '2': {OCR0=210; OCR2=210; }break;
			case '3': {OCR0=195; OCR2=195; }break;
			case '4': {OCR0=150; OCR2=150; }break;
			case '5': {OCR0=120; OCR2=120; }break;
			case '6': {OCR0=90; OCR2=90; } break;
			case '7': {OCR0=60; OCR2=60; }break;
 13a:	0f 2e       	mov	r0, r31
 13c:	fc e3       	ldi	r31, 0x3C	; 60
 13e:	cf 2e       	mov	r12, r31
 140:	f0 2d       	mov	r31, r0
			case '1': {OCR0=240; OCR2=240; } break;
			case '2': {OCR0=210; OCR2=210; }break;
			case '3': {OCR0=195; OCR2=195; }break;
			case '4': {OCR0=150; OCR2=150; }break;
			case '5': {OCR0=120; OCR2=120; }break;
			case '6': {OCR0=90; OCR2=90; } break;
 142:	0f 2e       	mov	r0, r31
 144:	fa e5       	ldi	r31, 0x5A	; 90
 146:	df 2e       	mov	r13, r31
 148:	f0 2d       	mov	r31, r0
			case '0': {OCR0=255; OCR2=255; } break;
			case '1': {OCR0=240; OCR2=240; } break;
			case '2': {OCR0=210; OCR2=210; }break;
			case '3': {OCR0=195; OCR2=195; }break;
			case '4': {OCR0=150; OCR2=150; }break;
			case '5': {OCR0=120; OCR2=120; }break;
 14a:	0f 2e       	mov	r0, r31
 14c:	f8 e7       	ldi	r31, 0x78	; 120
 14e:	ef 2e       	mov	r14, r31
 150:	f0 2d       	mov	r31, r0
			case 'A': left();  break;
			case '0': {OCR0=255; OCR2=255; } break;
			case '1': {OCR0=240; OCR2=240; } break;
			case '2': {OCR0=210; OCR2=210; }break;
			case '3': {OCR0=195; OCR2=195; }break;
			case '4': {OCR0=150; OCR2=150; }break;
 152:	0f 2e       	mov	r0, r31
 154:	f6 e9       	ldi	r31, 0x96	; 150
 156:	ff 2e       	mov	r15, r31
 158:	f0 2d       	mov	r31, r0
			case 'D':right(); break;
			case 'A': left();  break;
			case '0': {OCR0=255; OCR2=255; } break;
			case '1': {OCR0=240; OCR2=240; } break;
			case '2': {OCR0=210; OCR2=210; }break;
			case '3': {OCR0=195; OCR2=195; }break;
 15a:	03 ec       	ldi	r16, 0xC3	; 195
			case 'S': backward(); break;
			case 'D':right(); break;
			case 'A': left();  break;
			case '0': {OCR0=255; OCR2=255; } break;
			case '1': {OCR0=240; OCR2=240; } break;
			case '2': {OCR0=210; OCR2=210; }break;
 15c:	12 ed       	ldi	r17, 0xD2	; 210
			case 'W':forward(); break;
			case 'S': backward(); break;
			case 'D':right(); break;
			case 'A': left();  break;
			case '0': {OCR0=255; OCR2=255; } break;
			case '1': {OCR0=240; OCR2=240; } break;
 15e:	d0 ef       	ldi	r29, 0xF0	; 240
		{
			case 'W':forward(); break;
			case 'S': backward(); break;
			case 'D':right(); break;
			case 'A': left();  break;
			case '0': {OCR0=255; OCR2=255; } break;
 160:	cf ef       	ldi	r28, 0xFF	; 255
	//PORTC&=~(1<<PINC0);
	//PORTC&=~(1<<6);
	//double COUNTA=0 ; //storing digital output
	while(1)
	{
		switch(receiveChar())
 162:	0e 94 84 00 	call	0x108	; 0x108 <receiveChar>
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	f0 97       	sbiw	r30, 0x30	; 48
 16c:	eb 32       	cpi	r30, 0x2B	; 43
 16e:	f1 05       	cpc	r31, r1
 170:	08 f0       	brcs	.+2      	; 0x174 <main+0x64>
 172:	dd c0       	rjmp	.+442    	; 0x32e <main+0x21e>
 174:	e6 5d       	subi	r30, 0xD6	; 214
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	0c 94 bc 03 	jmp	0x778	; 0x778 <__tablejump2__>
		{
			case 'W':forward(); break;
 17c:	0e 94 a2 01 	call	0x344	; 0x344 <forward>
 180:	f0 cf       	rjmp	.-32     	; 0x162 <main+0x52>
			case 'S': backward(); break;
 182:	0e 94 a7 01 	call	0x34e	; 0x34e <backward>
 186:	ed cf       	rjmp	.-38     	; 0x162 <main+0x52>
			case 'D':right(); break;
 188:	0e 94 ac 01 	call	0x358	; 0x358 <right>
 18c:	ea cf       	rjmp	.-44     	; 0x162 <main+0x52>
			case 'A': left();  break;
 18e:	0e 94 b1 01 	call	0x362	; 0x362 <left>
 192:	e7 cf       	rjmp	.-50     	; 0x162 <main+0x52>
			case '0': {OCR0=255; OCR2=255; } break;
 194:	cc bf       	out	0x3c, r28	; 60
 196:	c3 bd       	out	0x23, r28	; 35
 198:	e4 cf       	rjmp	.-56     	; 0x162 <main+0x52>
			case '1': {OCR0=240; OCR2=240; } break;
 19a:	dc bf       	out	0x3c, r29	; 60
 19c:	d3 bd       	out	0x23, r29	; 35
 19e:	e1 cf       	rjmp	.-62     	; 0x162 <main+0x52>
			case '2': {OCR0=210; OCR2=210; }break;
 1a0:	1c bf       	out	0x3c, r17	; 60
 1a2:	13 bd       	out	0x23, r17	; 35
 1a4:	de cf       	rjmp	.-68     	; 0x162 <main+0x52>
			case '3': {OCR0=195; OCR2=195; }break;
 1a6:	0c bf       	out	0x3c, r16	; 60
 1a8:	03 bd       	out	0x23, r16	; 35
 1aa:	db cf       	rjmp	.-74     	; 0x162 <main+0x52>
			case '4': {OCR0=150; OCR2=150; }break;
 1ac:	fc be       	out	0x3c, r15	; 60
 1ae:	f3 bc       	out	0x23, r15	; 35
 1b0:	d8 cf       	rjmp	.-80     	; 0x162 <main+0x52>
			case '5': {OCR0=120; OCR2=120; }break;
 1b2:	ec be       	out	0x3c, r14	; 60
 1b4:	e3 bc       	out	0x23, r14	; 35
 1b6:	d5 cf       	rjmp	.-86     	; 0x162 <main+0x52>
			case '6': {OCR0=90; OCR2=90; } break;
 1b8:	dc be       	out	0x3c, r13	; 60
 1ba:	d3 bc       	out	0x23, r13	; 35
 1bc:	d2 cf       	rjmp	.-92     	; 0x162 <main+0x52>
			case '7': {OCR0=60; OCR2=60; }break;
 1be:	cc be       	out	0x3c, r12	; 60
 1c0:	c3 bc       	out	0x23, r12	; 35
 1c2:	cf cf       	rjmp	.-98     	; 0x162 <main+0x52>
			case '8': {OCR0=30; OCR2=30; }break;
 1c4:	bc be       	out	0x3c, r11	; 60
 1c6:	b3 bc       	out	0x23, r11	; 35
 1c8:	cc cf       	rjmp	.-104    	; 0x162 <main+0x52>
			case '9': {OCR0=0; OCR2=0; }break;
 1ca:	1c be       	out	0x3c, r1	; 60
 1cc:	13 bc       	out	0x23, r1	; 35
 1ce:	c9 cf       	rjmp	.-110    	; 0x162 <main+0x52>
			case 'Z': {while(1)
		                {
							if(GET_BIT (PINC,3)==0)
 1d0:	9b 99       	sbic	0x13, 3	; 19
 1d2:	09 c0       	rjmp	.+18     	; 0x1e6 <main+0xd6>
							{
								
							rotate(90);
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	84 eb       	ldi	r24, 0xB4	; 180
 1da:	92 e4       	ldi	r25, 0x42	; 66
 1dc:	0e 94 13 02 	call	0x426	; 0x426 <rotate>
							OCR0=0;
 1e0:	1c be       	out	0x3c, r1	; 60
							OCR2=0;
 1e2:	13 bc       	out	0x23, r1	; 35
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <main+0xda>
							}
							else
							forward();
 1e6:	0e 94 a2 01 	call	0x344	; 0x344 <forward>
							
								if (UDR=='A'||UDR=='W'||UDR=='S'||UDR=='D'||UDR=='X')
 1ea:	8c b1       	in	r24, 0x0c	; 12
 1ec:	81 34       	cpi	r24, 0x41	; 65
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <main+0xe2>
 1f0:	b8 cf       	rjmp	.-144    	; 0x162 <main+0x52>
 1f2:	8c b1       	in	r24, 0x0c	; 12
 1f4:	87 35       	cpi	r24, 0x57	; 87
 1f6:	09 f4       	brne	.+2      	; 0x1fa <main+0xea>
 1f8:	b4 cf       	rjmp	.-152    	; 0x162 <main+0x52>
 1fa:	8c b1       	in	r24, 0x0c	; 12
 1fc:	83 35       	cpi	r24, 0x53	; 83
 1fe:	09 f4       	brne	.+2      	; 0x202 <main+0xf2>
 200:	b0 cf       	rjmp	.-160    	; 0x162 <main+0x52>
 202:	8c b1       	in	r24, 0x0c	; 12
 204:	84 34       	cpi	r24, 0x44	; 68
 206:	09 f4       	brne	.+2      	; 0x20a <main+0xfa>
 208:	ac cf       	rjmp	.-168    	; 0x162 <main+0x52>
 20a:	8c b1       	in	r24, 0x0c	; 12
 20c:	88 35       	cpi	r24, 0x58	; 88
 20e:	01 f7       	brne	.-64     	; 0x1d0 <main+0xc0>
 210:	a8 cf       	rjmp	.-176    	; 0x162 <main+0x52>
								{
									break;
								}
						}
			       }break;
			case 'T': {Distance(100);}break;
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	88 ec       	ldi	r24, 0xC8	; 200
 218:	92 e4       	ldi	r25, 0x42	; 66
 21a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <Distance>
 21e:	a1 cf       	rjmp	.-190    	; 0x162 <main+0x52>
			case 'Y': {rotate(90);}break;
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	84 eb       	ldi	r24, 0xB4	; 180
 226:	92 e4       	ldi	r25, 0x42	; 66
 228:	0e 94 13 02 	call	0x426	; 0x426 <rotate>
 22c:	9a cf       	rjmp	.-204    	; 0x162 <main+0x52>
			case 'R': {squaree();}break;
 22e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <squaree>
 232:	97 cf       	rjmp	.-210    	; 0x162 <main+0x52>
			case 'I': {infinity(300);}break;
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	86 e9       	ldi	r24, 0x96	; 150
 23a:	93 e4       	ldi	r25, 0x43	; 67
 23c:	0e 94 86 02 	call	0x50c	; 0x50c <infinity>
 240:	90 cf       	rjmp	.-224    	; 0x162 <main+0x52>
			case 'C': {cir(590);}break;
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	70 e8       	ldi	r23, 0x80	; 128
 246:	83 e1       	ldi	r24, 0x13	; 19
 248:	94 e4       	ldi	r25, 0x44	; 68
 24a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <cir>
 24e:	89 cf       	rjmp	.-238    	; 0x162 <main+0x52>
			case 'U': {squaree();
 250:	0e 94 53 02 	call	0x4a6	; 0x4a6 <squaree>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	2a ea       	ldi	r18, 0xAA	; 170
 256:	30 e4       	ldi	r19, 0x40	; 64
 258:	89 ef       	ldi	r24, 0xF9	; 249
 25a:	93 e0       	ldi	r25, 0x03	; 3
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	30 40       	sbci	r19, 0x00	; 0
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	d9 f7       	brne	.-10     	; 0x25c <main+0x14c>
 266:	00 00       	nop
				_delay_ms(25000);
				infinity(300);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	86 e9       	ldi	r24, 0x96	; 150
 26e:	93 e4       	ldi	r25, 0x43	; 67
 270:	0e 94 86 02 	call	0x50c	; 0x50c <infinity>
 274:	2a ea       	ldi	r18, 0xAA	; 170
 276:	30 e4       	ldi	r19, 0x40	; 64
 278:	89 ef       	ldi	r24, 0xF9	; 249
 27a:	93 e0       	ldi	r25, 0x03	; 3
 27c:	21 50       	subi	r18, 0x01	; 1
 27e:	30 40       	sbci	r19, 0x00	; 0
 280:	80 40       	sbci	r24, 0x00	; 0
 282:	90 40       	sbci	r25, 0x00	; 0
 284:	d9 f7       	brne	.-10     	; 0x27c <main+0x16c>
 286:	00 00       	nop
				_delay_ms(25000);
				cir(590);}break;					
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	70 e8       	ldi	r23, 0x80	; 128
 28c:	83 e1       	ldi	r24, 0x13	; 19
 28e:	94 e4       	ldi	r25, 0x44	; 68
 290:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <cir>
 294:	66 cf       	rjmp	.-308    	; 0x162 <main+0x52>
			case'M':  {
              while (1)
				{
					if(GET_BIT(PINC,7)==1&&GET_BIT(PINC,6)==1&&GET_BIT(PINC,5)==0)
 296:	9f 9b       	sbis	0x13, 7	; 19
 298:	07 c0       	rjmp	.+14     	; 0x2a8 <main+0x198>
 29a:	9e 9b       	sbis	0x13, 6	; 19
 29c:	05 c0       	rjmp	.+10     	; 0x2a8 <main+0x198>
 29e:	9d 99       	sbic	0x13, 5	; 19
 2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <main+0x198>
					{
						forwardd();
 2a2:	0e 94 bb 01 	call	0x376	; 0x376 <forwardd>
 2a6:	2e c0       	rjmp	.+92     	; 0x304 <main+0x1f4>
					}
				 else if (GET_BIT(PINC,7)==0&&GET_BIT(PINC,6)==1&&GET_BIT(PINC,5)==1)
 2a8:	9f 99       	sbic	0x13, 7	; 19
 2aa:	0b c0       	rjmp	.+22     	; 0x2c2 <main+0x1b2>
 2ac:	9e 9b       	sbis	0x13, 6	; 19
 2ae:	09 c0       	rjmp	.+18     	; 0x2c2 <main+0x1b2>
 2b0:	9d 9b       	sbis	0x13, 5	; 19
 2b2:	07 c0       	rjmp	.+14     	; 0x2c2 <main+0x1b2>
				{
					while (GET_BIT(PINC,5)!=0)
 2b4:	9d 9b       	sbis	0x13, 5	; 19
 2b6:	26 c0       	rjmp	.+76     	; 0x304 <main+0x1f4>
					{
					    rightt();
 2b8:	0e 94 c3 01 	call	0x386	; 0x386 <rightt>
					{
						forwardd();
					}
				 else if (GET_BIT(PINC,7)==0&&GET_BIT(PINC,6)==1&&GET_BIT(PINC,5)==1)
				{
					while (GET_BIT(PINC,5)!=0)
 2bc:	9d 99       	sbic	0x13, 5	; 19
 2be:	fc cf       	rjmp	.-8      	; 0x2b8 <main+0x1a8>
 2c0:	21 c0       	rjmp	.+66     	; 0x304 <main+0x1f4>
					{
					    rightt();
					}
				}
				 else if (GET_BIT(PINC,7)==1&&GET_BIT(PINC,6)==0&&GET_BIT(PINC,5)==1)
 2c2:	9f 9b       	sbis	0x13, 7	; 19
 2c4:	0b c0       	rjmp	.+22     	; 0x2dc <main+0x1cc>
 2c6:	9e 99       	sbic	0x13, 6	; 19
 2c8:	09 c0       	rjmp	.+18     	; 0x2dc <main+0x1cc>
 2ca:	9d 9b       	sbis	0x13, 5	; 19
 2cc:	07 c0       	rjmp	.+14     	; 0x2dc <main+0x1cc>
				{
					
					while (GET_BIT(PINC,5)!=0)
 2ce:	9d 9b       	sbis	0x13, 5	; 19
 2d0:	19 c0       	rjmp	.+50     	; 0x304 <main+0x1f4>
					{
					leftt();
 2d2:	0e 94 cb 01 	call	0x396	; 0x396 <leftt>
					}
				}
				 else if (GET_BIT(PINC,7)==1&&GET_BIT(PINC,6)==0&&GET_BIT(PINC,5)==1)
				{
					
					while (GET_BIT(PINC,5)!=0)
 2d6:	9d 99       	sbic	0x13, 5	; 19
 2d8:	fc cf       	rjmp	.-8      	; 0x2d2 <main+0x1c2>
 2da:	14 c0       	rjmp	.+40     	; 0x304 <main+0x1f4>
					{
					leftt();
					}
				}
				 else if (GET_BIT(PINC,7)==1&&GET_BIT(PINC,6)==0&&GET_BIT(PINC,5)==0)
 2dc:	9f 9b       	sbis	0x13, 7	; 19
 2de:	07 c0       	rjmp	.+14     	; 0x2ee <main+0x1de>
 2e0:	9e 99       	sbic	0x13, 6	; 19
 2e2:	05 c0       	rjmp	.+10     	; 0x2ee <main+0x1de>
 2e4:	9d 99       	sbic	0x13, 5	; 19
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <main+0x1de>
				{
					leftt();
 2e8:	0e 94 cb 01 	call	0x396	; 0x396 <leftt>
 2ec:	0b c0       	rjmp	.+22     	; 0x304 <main+0x1f4>
				}
				 else if (GET_BIT(PINC,7)==0&&GET_BIT(PINC,6)==1&&GET_BIT(PINC,5)==0)
 2ee:	9f 99       	sbic	0x13, 7	; 19
 2f0:	07 c0       	rjmp	.+14     	; 0x300 <main+0x1f0>
 2f2:	9e 9b       	sbis	0x13, 6	; 19
 2f4:	05 c0       	rjmp	.+10     	; 0x300 <main+0x1f0>
 2f6:	9d 99       	sbic	0x13, 5	; 19
 2f8:	03 c0       	rjmp	.+6      	; 0x300 <main+0x1f0>
				{
					rightt();
 2fa:	0e 94 c3 01 	call	0x386	; 0x386 <rightt>
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <main+0x1f4>
				}
			     else {
					 forwardd();
 300:	0e 94 bb 01 	call	0x376	; 0x376 <forwardd>
				 } 
					
					if (UDR=='A'||UDR=='W'||UDR=='S'||UDR=='D'||UDR=='X')
 304:	8c b1       	in	r24, 0x0c	; 12
 306:	81 34       	cpi	r24, 0x41	; 65
 308:	09 f4       	brne	.+2      	; 0x30c <main+0x1fc>
 30a:	2b cf       	rjmp	.-426    	; 0x162 <main+0x52>
 30c:	8c b1       	in	r24, 0x0c	; 12
 30e:	87 35       	cpi	r24, 0x57	; 87
 310:	09 f4       	brne	.+2      	; 0x314 <main+0x204>
 312:	27 cf       	rjmp	.-434    	; 0x162 <main+0x52>
 314:	8c b1       	in	r24, 0x0c	; 12
 316:	83 35       	cpi	r24, 0x53	; 83
 318:	09 f4       	brne	.+2      	; 0x31c <main+0x20c>
 31a:	23 cf       	rjmp	.-442    	; 0x162 <main+0x52>
 31c:	8c b1       	in	r24, 0x0c	; 12
 31e:	84 34       	cpi	r24, 0x44	; 68
 320:	09 f4       	brne	.+2      	; 0x324 <main+0x214>
 322:	1f cf       	rjmp	.-450    	; 0x162 <main+0x52>
 324:	8c b1       	in	r24, 0x0c	; 12
 326:	88 35       	cpi	r24, 0x58	; 88
 328:	09 f0       	breq	.+2      	; 0x32c <main+0x21c>
 32a:	b5 cf       	rjmp	.-150    	; 0x296 <main+0x186>
 32c:	1a cf       	rjmp	.-460    	; 0x162 <main+0x52>
				 }
				 
				
			
				     } break;
			default :stop();break;
 32e:	0e 94 b6 01 	call	0x36c	; 0x36c <stop>
 332:	17 cf       	rjmp	.-466    	; 0x162 <main+0x52>

00000334 <Initpwm>:
	CLR_BIT(PORTA,mRP);
	SET_BIT(PORTA,mRN);
	SET_BIT(PORTA,mLN);
	CLR_BIT(PORTA,mLP);
	OCR0=208;
	OCR2=208;
 334:	85 ef       	ldi	r24, 0xF5	; 245
 336:	83 bf       	out	0x33, r24	; 51
 338:	bb 9a       	sbi	0x17, 3	; 23
 33a:	08 95       	ret

0000033c <Initpwm1>:
 33c:	85 ef       	ldi	r24, 0xF5	; 245
 33e:	85 bd       	out	0x25, r24	; 37
 340:	8f 9a       	sbi	0x11, 7	; 17
 342:	08 95       	ret

00000344 <forward>:
 344:	d8 9a       	sbi	0x1b, 0	; 27
 346:	d9 98       	cbi	0x1b, 1	; 27
 348:	db 98       	cbi	0x1b, 3	; 27
 34a:	da 9a       	sbi	0x1b, 2	; 27
 34c:	08 95       	ret

0000034e <backward>:
 34e:	d8 98       	cbi	0x1b, 0	; 27
 350:	d9 9a       	sbi	0x1b, 1	; 27
 352:	db 9a       	sbi	0x1b, 3	; 27
 354:	da 98       	cbi	0x1b, 2	; 27
 356:	08 95       	ret

00000358 <right>:
 358:	d8 9a       	sbi	0x1b, 0	; 27
 35a:	d9 98       	cbi	0x1b, 1	; 27
 35c:	db 9a       	sbi	0x1b, 3	; 27
 35e:	da 98       	cbi	0x1b, 2	; 27
 360:	08 95       	ret

00000362 <left>:
 362:	d8 98       	cbi	0x1b, 0	; 27
 364:	d9 9a       	sbi	0x1b, 1	; 27
 366:	db 98       	cbi	0x1b, 3	; 27
 368:	da 9a       	sbi	0x1b, 2	; 27
 36a:	08 95       	ret

0000036c <stop>:
 36c:	d8 98       	cbi	0x1b, 0	; 27
 36e:	d9 98       	cbi	0x1b, 1	; 27
 370:	db 98       	cbi	0x1b, 3	; 27
 372:	da 98       	cbi	0x1b, 2	; 27
 374:	08 95       	ret

00000376 <forwardd>:
 376:	d8 9a       	sbi	0x1b, 0	; 27
 378:	d9 98       	cbi	0x1b, 1	; 27
 37a:	db 98       	cbi	0x1b, 3	; 27
 37c:	da 9a       	sbi	0x1b, 2	; 27
 37e:	80 ed       	ldi	r24, 0xD0	; 208
 380:	8c bf       	out	0x3c, r24	; 60
 382:	83 bd       	out	0x23, r24	; 35
 384:	08 95       	ret

00000386 <rightt>:
}
void rightt()
{
	SET_BIT(PORTA,mRP);
 386:	d8 9a       	sbi	0x1b, 0	; 27
	CLR_BIT(PORTA,mRN);
 388:	d9 98       	cbi	0x1b, 1	; 27
	SET_BIT(PORTA,mLN);
 38a:	db 9a       	sbi	0x1b, 3	; 27
	CLR_BIT(PORTA,mLP);
 38c:	da 98       	cbi	0x1b, 2	; 27
	OCR0=120;
 38e:	88 e7       	ldi	r24, 0x78	; 120
 390:	8c bf       	out	0x3c, r24	; 60
	OCR2=120;
 392:	83 bd       	out	0x23, r24	; 35
 394:	08 95       	ret

00000396 <leftt>:
}
void leftt()
{
	CLR_BIT(PORTA,mRP);
 396:	d8 98       	cbi	0x1b, 0	; 27
	SET_BIT(PORTA,mRN);
 398:	d9 9a       	sbi	0x1b, 1	; 27
	CLR_BIT(PORTA,mLN);
 39a:	db 98       	cbi	0x1b, 3	; 27
	SET_BIT(PORTA,mLP);
 39c:	da 9a       	sbi	0x1b, 2	; 27
	OCR0=120;
 39e:	88 e7       	ldi	r24, 0x78	; 120
 3a0:	8c bf       	out	0x3c, r24	; 60
	OCR2=120;
 3a2:	83 bd       	out	0x23, r24	; 35
 3a4:	08 95       	ret

000003a6 <Distance>:
}
void Distance( float x)
{
 3a6:	8f 92       	push	r8
 3a8:	9f 92       	push	r9
 3aa:	af 92       	push	r10
 3ac:	bf 92       	push	r11
 3ae:	cf 92       	push	r12
 3b0:	df 92       	push	r13
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	4b 01       	movw	r8, r22
 3b8:	5c 01       	movw	r10, r24
	float counter =0;
	int arr[2];
	forward();
 3ba:	0e 94 a2 01 	call	0x344	; 0x344 <forward>
	while(counter < x)
 3be:	20 e0       	ldi	r18, 0x00	; 0
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	a9 01       	movw	r20, r18
 3c4:	c5 01       	movw	r24, r10
 3c6:	b4 01       	movw	r22, r8
 3c8:	0e 94 95 03 	call	0x72a	; 0x72a <__gesf2>
 3cc:	18 16       	cp	r1, r24
 3ce:	a4 f0       	brlt	.+40     	; 0x3f8 <Distance+0x52>
 3d0:	1f c0       	rjmp	.+62     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		{
			arr[i]=GET_BIT(PINC,4);
		}
		if(arr[0]!=arr[1])
		{
			counter+= 1.7;
 3d2:	2a e9       	ldi	r18, 0x9A	; 154
 3d4:	39 e9       	ldi	r19, 0x99	; 153
 3d6:	49 ed       	ldi	r20, 0xD9	; 217
 3d8:	5f e3       	ldi	r21, 0x3F	; 63
 3da:	c7 01       	movw	r24, r14
 3dc:	b6 01       	movw	r22, r12
 3de:	0e 94 af 02 	call	0x55e	; 0x55e <__addsf3>
 3e2:	6b 01       	movw	r12, r22
 3e4:	7c 01       	movw	r14, r24
void Distance( float x)
{
	float counter =0;
	int arr[2];
	forward();
	while(counter < x)
 3e6:	a7 01       	movw	r20, r14
 3e8:	96 01       	movw	r18, r12
 3ea:	c5 01       	movw	r24, r10
 3ec:	b4 01       	movw	r22, r8
 3ee:	0e 94 95 03 	call	0x72a	; 0x72a <__gesf2>
 3f2:	18 16       	cp	r1, r24
 3f4:	24 f0       	brlt	.+8      	; 0x3fe <Distance+0x58>
 3f6:	0c c0       	rjmp	.+24     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3f8:	c1 2c       	mov	r12, r1
 3fa:	d1 2c       	mov	r13, r1
 3fc:	76 01       	movw	r14, r12
	{

		for(int i=0; i<2; i++)
		{
			arr[i]=GET_BIT(PINC,4);
 3fe:	83 b3       	in	r24, 0x13	; 19
 400:	93 b3       	in	r25, 0x13	; 19
		}
		if(arr[0]!=arr[1])
 402:	92 95       	swap	r25
 404:	91 70       	andi	r25, 0x01	; 1
 406:	82 95       	swap	r24
 408:	81 70       	andi	r24, 0x01	; 1
 40a:	98 13       	cpse	r25, r24
 40c:	e2 cf       	rjmp	.-60     	; 0x3d2 <Distance+0x2c>
 40e:	eb cf       	rjmp	.-42     	; 0x3e6 <Distance+0x40>
		{
			counter+= 1.7;
		}
	}
	stop();
 410:	0e 94 b6 01 	call	0x36c	; 0x36c <stop>
	
}
 414:	ff 90       	pop	r15
 416:	ef 90       	pop	r14
 418:	df 90       	pop	r13
 41a:	cf 90       	pop	r12
 41c:	bf 90       	pop	r11
 41e:	af 90       	pop	r10
 420:	9f 90       	pop	r9
 422:	8f 90       	pop	r8
 424:	08 95       	ret

00000426 <rotate>:
void rotate (float n)
{
 426:	8f 92       	push	r8
 428:	9f 92       	push	r9
 42a:	af 92       	push	r10
 42c:	bf 92       	push	r11
 42e:	cf 92       	push	r12
 430:	df 92       	push	r13
 432:	ef 92       	push	r14
 434:	ff 92       	push	r15
 436:	4b 01       	movw	r8, r22
 438:	5c 01       	movw	r10, r24
	OCR0=120;
 43a:	88 e7       	ldi	r24, 0x78	; 120
 43c:	8c bf       	out	0x3c, r24	; 60
	OCR2=120;
 43e:	83 bd       	out	0x23, r24	; 35
	float counter =0;
	int arr[2];
	while(counter<n)
 440:	20 e0       	ldi	r18, 0x00	; 0
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	a9 01       	movw	r20, r18
 446:	c5 01       	movw	r24, r10
 448:	b4 01       	movw	r22, r8
 44a:	0e 94 95 03 	call	0x72a	; 0x72a <__gesf2>
 44e:	18 16       	cp	r1, r24
 450:	fc f4       	brge	.+62     	; 0x490 <rotate+0x6a>
 452:	c1 2c       	mov	r12, r1
 454:	d1 2c       	mov	r13, r1
 456:	76 01       	movw	r14, r12
	{
		right();
 458:	0e 94 ac 01 	call	0x358	; 0x358 <right>
		for(int i=0; i<2; i++)
		{
			arr[i]=GET_BIT(PINC,4);
 45c:	83 b3       	in	r24, 0x13	; 19
 45e:	93 b3       	in	r25, 0x13	; 19
		}
		if(arr[0]!=arr[1])
 460:	92 95       	swap	r25
 462:	91 70       	andi	r25, 0x01	; 1
 464:	82 95       	swap	r24
 466:	81 70       	andi	r24, 0x01	; 1
 468:	98 17       	cp	r25, r24
 46a:	51 f0       	breq	.+20     	; 0x480 <rotate+0x5a>
		{
			counter+= 2.2;
 46c:	2d ec       	ldi	r18, 0xCD	; 205
 46e:	3c ec       	ldi	r19, 0xCC	; 204
 470:	4c e0       	ldi	r20, 0x0C	; 12
 472:	50 e4       	ldi	r21, 0x40	; 64
 474:	c7 01       	movw	r24, r14
 476:	b6 01       	movw	r22, r12
 478:	0e 94 af 02 	call	0x55e	; 0x55e <__addsf3>
 47c:	6b 01       	movw	r12, r22
 47e:	7c 01       	movw	r14, r24
{
	OCR0=120;
	OCR2=120;
	float counter =0;
	int arr[2];
	while(counter<n)
 480:	a5 01       	movw	r20, r10
 482:	94 01       	movw	r18, r8
 484:	c7 01       	movw	r24, r14
 486:	b6 01       	movw	r22, r12
 488:	0e 94 1b 03 	call	0x636	; 0x636 <__cmpsf2>
 48c:	88 23       	and	r24, r24
 48e:	24 f3       	brlt	.-56     	; 0x458 <rotate+0x32>
		if(arr[0]!=arr[1])
		{
			counter+= 2.2;
		}
	}
	stop();
 490:	0e 94 b6 01 	call	0x36c	; 0x36c <stop>
}
 494:	ff 90       	pop	r15
 496:	ef 90       	pop	r14
 498:	df 90       	pop	r13
 49a:	cf 90       	pop	r12
 49c:	bf 90       	pop	r11
 49e:	af 90       	pop	r10
 4a0:	9f 90       	pop	r9
 4a2:	8f 90       	pop	r8
 4a4:	08 95       	ret

000004a6 <squaree>:
void squaree ()
{
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
	OCR0=150;
 4aa:	86 e9       	ldi	r24, 0x96	; 150
 4ac:	8c bf       	out	0x3c, r24	; 60
	OCR2=150;
 4ae:	83 bd       	out	0x23, r24	; 35
 4b0:	c4 e0       	ldi	r28, 0x04	; 4
 4b2:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0;i<4;i++)
	{
	Distance(150);
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	86 e1       	ldi	r24, 0x16	; 22
 4ba:	93 e4       	ldi	r25, 0x43	; 67
 4bc:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <Distance>
 4c0:	2f e9       	ldi	r18, 0x9F	; 159
 4c2:	86 e8       	ldi	r24, 0x86	; 134
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	21 50       	subi	r18, 0x01	; 1
 4c8:	80 40       	sbci	r24, 0x00	; 0
 4ca:	90 40       	sbci	r25, 0x00	; 0
 4cc:	e1 f7       	brne	.-8      	; 0x4c6 <squaree+0x20>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <squaree+0x2a>
 4d0:	00 00       	nop
	_delay_ms(500);
	rotate(90);
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	84 eb       	ldi	r24, 0xB4	; 180
 4d8:	92 e4       	ldi	r25, 0x42	; 66
 4da:	0e 94 13 02 	call	0x426	; 0x426 <rotate>
 4de:	21 97       	sbiw	r28, 0x01	; 1
}
void squaree ()
{
	OCR0=150;
	OCR2=150;
	for(int i=0;i<4;i++)
 4e0:	49 f7       	brne	.-46     	; 0x4b4 <squaree+0xe>
	{
	Distance(150);
	_delay_ms(500);
	rotate(90);
	}
}
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <circlee1>:
void circlee1(float x)
{
	OCR0=0;
 4e8:	1c be       	out	0x3c, r1	; 60
	OCR2 = 240;
 4ea:	20 ef       	ldi	r18, 0xF0	; 240
 4ec:	23 bd       	out	0x23, r18	; 35
	Distance(x);
 4ee:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <Distance>
 4f2:	08 95       	ret

000004f4 <cir>:
}
void cir (float x)
{
	OCR0=0;
 4f4:	1c be       	out	0x3c, r1	; 60
	OCR2=210;
 4f6:	22 ed       	ldi	r18, 0xD2	; 210
 4f8:	23 bd       	out	0x23, r18	; 35
	Distance(x);
 4fa:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <Distance>
 4fe:	08 95       	ret

00000500 <circlee2>:
}
void circlee2 (float x)
{
	OCR2=0;
 500:	13 bc       	out	0x23, r1	; 35
	OCR0 = 240;
 502:	20 ef       	ldi	r18, 0xF0	; 240
 504:	2c bf       	out	0x3c, r18	; 60
	Distance(x);
 506:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <Distance>
 50a:	08 95       	ret

0000050c <infinity>:
}
void infinity(float x)
{
 50c:	cf 92       	push	r12
 50e:	df 92       	push	r13
 510:	ef 92       	push	r14
 512:	ff 92       	push	r15
 514:	cf 93       	push	r28
 516:	6b 01       	movw	r12, r22
 518:	7c 01       	movw	r14, r24
	OCR2=150;
 51a:	c6 e9       	ldi	r28, 0x96	; 150
 51c:	c3 bd       	out	0x23, r28	; 35
	OCR0=150;
 51e:	cc bf       	out	0x3c, r28	; 60
	Distance(150);
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	86 e1       	ldi	r24, 0x16	; 22
 526:	93 e4       	ldi	r25, 0x43	; 67
 528:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <Distance>
	circlee1(x);
 52c:	c7 01       	movw	r24, r14
 52e:	b6 01       	movw	r22, r12
 530:	0e 94 74 02 	call	0x4e8	; 0x4e8 <circlee1>
	OCR2=150;
 534:	c3 bd       	out	0x23, r28	; 35
	OCR0=150;
 536:	cc bf       	out	0x3c, r28	; 60
	Distance(150);
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	70 e0       	ldi	r23, 0x00	; 0
 53c:	86 e1       	ldi	r24, 0x16	; 22
 53e:	93 e4       	ldi	r25, 0x43	; 67
 540:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <Distance>
	circlee2(400);
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	70 e0       	ldi	r23, 0x00	; 0
 548:	88 ec       	ldi	r24, 0xC8	; 200
 54a:	93 e4       	ldi	r25, 0x43	; 67
 54c:	0e 94 80 02 	call	0x500	; 0x500 <circlee2>
	
 550:	cf 91       	pop	r28
 552:	ff 90       	pop	r15
 554:	ef 90       	pop	r14
 556:	df 90       	pop	r13
 558:	cf 90       	pop	r12
 55a:	08 95       	ret

0000055c <__subsf3>:
 55c:	50 58       	subi	r21, 0x80	; 128

0000055e <__addsf3>:
 55e:	bb 27       	eor	r27, r27
 560:	aa 27       	eor	r26, r26
 562:	0e 94 c6 02 	call	0x58c	; 0x58c <__addsf3x>
 566:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__fp_round>
 56a:	0e 94 4d 03 	call	0x69a	; 0x69a <__fp_pscA>
 56e:	38 f0       	brcs	.+14     	; 0x57e <__addsf3+0x20>
 570:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__fp_pscB>
 574:	20 f0       	brcs	.+8      	; 0x57e <__addsf3+0x20>
 576:	39 f4       	brne	.+14     	; 0x586 <__addsf3+0x28>
 578:	9f 3f       	cpi	r25, 0xFF	; 255
 57a:	19 f4       	brne	.+6      	; 0x582 <__addsf3+0x24>
 57c:	26 f4       	brtc	.+8      	; 0x586 <__addsf3+0x28>
 57e:	0c 94 4a 03 	jmp	0x694	; 0x694 <__fp_nan>
 582:	0e f4       	brtc	.+2      	; 0x586 <__addsf3+0x28>
 584:	e0 95       	com	r30
 586:	e7 fb       	bst	r30, 7
 588:	0c 94 44 03 	jmp	0x688	; 0x688 <__fp_inf>

0000058c <__addsf3x>:
 58c:	e9 2f       	mov	r30, r25
 58e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__fp_split3>
 592:	58 f3       	brcs	.-42     	; 0x56a <__addsf3+0xc>
 594:	ba 17       	cp	r27, r26
 596:	62 07       	cpc	r22, r18
 598:	73 07       	cpc	r23, r19
 59a:	84 07       	cpc	r24, r20
 59c:	95 07       	cpc	r25, r21
 59e:	20 f0       	brcs	.+8      	; 0x5a8 <__addsf3x+0x1c>
 5a0:	79 f4       	brne	.+30     	; 0x5c0 <__addsf3x+0x34>
 5a2:	a6 f5       	brtc	.+104    	; 0x60c <__addsf3x+0x80>
 5a4:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__fp_zero>
 5a8:	0e f4       	brtc	.+2      	; 0x5ac <__addsf3x+0x20>
 5aa:	e0 95       	com	r30
 5ac:	0b 2e       	mov	r0, r27
 5ae:	ba 2f       	mov	r27, r26
 5b0:	a0 2d       	mov	r26, r0
 5b2:	0b 01       	movw	r0, r22
 5b4:	b9 01       	movw	r22, r18
 5b6:	90 01       	movw	r18, r0
 5b8:	0c 01       	movw	r0, r24
 5ba:	ca 01       	movw	r24, r20
 5bc:	a0 01       	movw	r20, r0
 5be:	11 24       	eor	r1, r1
 5c0:	ff 27       	eor	r31, r31
 5c2:	59 1b       	sub	r21, r25
 5c4:	99 f0       	breq	.+38     	; 0x5ec <__addsf3x+0x60>
 5c6:	59 3f       	cpi	r21, 0xF9	; 249
 5c8:	50 f4       	brcc	.+20     	; 0x5de <__addsf3x+0x52>
 5ca:	50 3e       	cpi	r21, 0xE0	; 224
 5cc:	68 f1       	brcs	.+90     	; 0x628 <__addsf3x+0x9c>
 5ce:	1a 16       	cp	r1, r26
 5d0:	f0 40       	sbci	r31, 0x00	; 0
 5d2:	a2 2f       	mov	r26, r18
 5d4:	23 2f       	mov	r18, r19
 5d6:	34 2f       	mov	r19, r20
 5d8:	44 27       	eor	r20, r20
 5da:	58 5f       	subi	r21, 0xF8	; 248
 5dc:	f3 cf       	rjmp	.-26     	; 0x5c4 <__addsf3x+0x38>
 5de:	46 95       	lsr	r20
 5e0:	37 95       	ror	r19
 5e2:	27 95       	ror	r18
 5e4:	a7 95       	ror	r26
 5e6:	f0 40       	sbci	r31, 0x00	; 0
 5e8:	53 95       	inc	r21
 5ea:	c9 f7       	brne	.-14     	; 0x5de <__addsf3x+0x52>
 5ec:	7e f4       	brtc	.+30     	; 0x60c <__addsf3x+0x80>
 5ee:	1f 16       	cp	r1, r31
 5f0:	ba 0b       	sbc	r27, r26
 5f2:	62 0b       	sbc	r22, r18
 5f4:	73 0b       	sbc	r23, r19
 5f6:	84 0b       	sbc	r24, r20
 5f8:	ba f0       	brmi	.+46     	; 0x628 <__addsf3x+0x9c>
 5fa:	91 50       	subi	r25, 0x01	; 1
 5fc:	a1 f0       	breq	.+40     	; 0x626 <__addsf3x+0x9a>
 5fe:	ff 0f       	add	r31, r31
 600:	bb 1f       	adc	r27, r27
 602:	66 1f       	adc	r22, r22
 604:	77 1f       	adc	r23, r23
 606:	88 1f       	adc	r24, r24
 608:	c2 f7       	brpl	.-16     	; 0x5fa <__addsf3x+0x6e>
 60a:	0e c0       	rjmp	.+28     	; 0x628 <__addsf3x+0x9c>
 60c:	ba 0f       	add	r27, r26
 60e:	62 1f       	adc	r22, r18
 610:	73 1f       	adc	r23, r19
 612:	84 1f       	adc	r24, r20
 614:	48 f4       	brcc	.+18     	; 0x628 <__addsf3x+0x9c>
 616:	87 95       	ror	r24
 618:	77 95       	ror	r23
 61a:	67 95       	ror	r22
 61c:	b7 95       	ror	r27
 61e:	f7 95       	ror	r31
 620:	9e 3f       	cpi	r25, 0xFE	; 254
 622:	08 f0       	brcs	.+2      	; 0x626 <__addsf3x+0x9a>
 624:	b0 cf       	rjmp	.-160    	; 0x586 <__addsf3+0x28>
 626:	93 95       	inc	r25
 628:	88 0f       	add	r24, r24
 62a:	08 f0       	brcs	.+2      	; 0x62e <__addsf3x+0xa2>
 62c:	99 27       	eor	r25, r25
 62e:	ee 0f       	add	r30, r30
 630:	97 95       	ror	r25
 632:	87 95       	ror	r24
 634:	08 95       	ret

00000636 <__cmpsf2>:
 636:	0e 94 20 03 	call	0x640	; 0x640 <__fp_cmp>
 63a:	08 f4       	brcc	.+2      	; 0x63e <__cmpsf2+0x8>
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	08 95       	ret

00000640 <__fp_cmp>:
 640:	99 0f       	add	r25, r25
 642:	00 08       	sbc	r0, r0
 644:	55 0f       	add	r21, r21
 646:	aa 0b       	sbc	r26, r26
 648:	e0 e8       	ldi	r30, 0x80	; 128
 64a:	fe ef       	ldi	r31, 0xFE	; 254
 64c:	16 16       	cp	r1, r22
 64e:	17 06       	cpc	r1, r23
 650:	e8 07       	cpc	r30, r24
 652:	f9 07       	cpc	r31, r25
 654:	c0 f0       	brcs	.+48     	; 0x686 <__fp_cmp+0x46>
 656:	12 16       	cp	r1, r18
 658:	13 06       	cpc	r1, r19
 65a:	e4 07       	cpc	r30, r20
 65c:	f5 07       	cpc	r31, r21
 65e:	98 f0       	brcs	.+38     	; 0x686 <__fp_cmp+0x46>
 660:	62 1b       	sub	r22, r18
 662:	73 0b       	sbc	r23, r19
 664:	84 0b       	sbc	r24, r20
 666:	95 0b       	sbc	r25, r21
 668:	39 f4       	brne	.+14     	; 0x678 <__fp_cmp+0x38>
 66a:	0a 26       	eor	r0, r26
 66c:	61 f0       	breq	.+24     	; 0x686 <__fp_cmp+0x46>
 66e:	23 2b       	or	r18, r19
 670:	24 2b       	or	r18, r20
 672:	25 2b       	or	r18, r21
 674:	21 f4       	brne	.+8      	; 0x67e <__fp_cmp+0x3e>
 676:	08 95       	ret
 678:	0a 26       	eor	r0, r26
 67a:	09 f4       	brne	.+2      	; 0x67e <__fp_cmp+0x3e>
 67c:	a1 40       	sbci	r26, 0x01	; 1
 67e:	a6 95       	lsr	r26
 680:	8f ef       	ldi	r24, 0xFF	; 255
 682:	81 1d       	adc	r24, r1
 684:	81 1d       	adc	r24, r1
 686:	08 95       	ret

00000688 <__fp_inf>:
 688:	97 f9       	bld	r25, 7
 68a:	9f 67       	ori	r25, 0x7F	; 127
 68c:	80 e8       	ldi	r24, 0x80	; 128
 68e:	70 e0       	ldi	r23, 0x00	; 0
 690:	60 e0       	ldi	r22, 0x00	; 0
 692:	08 95       	ret

00000694 <__fp_nan>:
 694:	9f ef       	ldi	r25, 0xFF	; 255
 696:	80 ec       	ldi	r24, 0xC0	; 192
 698:	08 95       	ret

0000069a <__fp_pscA>:
 69a:	00 24       	eor	r0, r0
 69c:	0a 94       	dec	r0
 69e:	16 16       	cp	r1, r22
 6a0:	17 06       	cpc	r1, r23
 6a2:	18 06       	cpc	r1, r24
 6a4:	09 06       	cpc	r0, r25
 6a6:	08 95       	ret

000006a8 <__fp_pscB>:
 6a8:	00 24       	eor	r0, r0
 6aa:	0a 94       	dec	r0
 6ac:	12 16       	cp	r1, r18
 6ae:	13 06       	cpc	r1, r19
 6b0:	14 06       	cpc	r1, r20
 6b2:	05 06       	cpc	r0, r21
 6b4:	08 95       	ret

000006b6 <__fp_round>:
 6b6:	09 2e       	mov	r0, r25
 6b8:	03 94       	inc	r0
 6ba:	00 0c       	add	r0, r0
 6bc:	11 f4       	brne	.+4      	; 0x6c2 <__fp_round+0xc>
 6be:	88 23       	and	r24, r24
 6c0:	52 f0       	brmi	.+20     	; 0x6d6 <__fp_round+0x20>
 6c2:	bb 0f       	add	r27, r27
 6c4:	40 f4       	brcc	.+16     	; 0x6d6 <__fp_round+0x20>
 6c6:	bf 2b       	or	r27, r31
 6c8:	11 f4       	brne	.+4      	; 0x6ce <__fp_round+0x18>
 6ca:	60 ff       	sbrs	r22, 0
 6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <__fp_round+0x20>
 6ce:	6f 5f       	subi	r22, 0xFF	; 255
 6d0:	7f 4f       	sbci	r23, 0xFF	; 255
 6d2:	8f 4f       	sbci	r24, 0xFF	; 255
 6d4:	9f 4f       	sbci	r25, 0xFF	; 255
 6d6:	08 95       	ret

000006d8 <__fp_split3>:
 6d8:	57 fd       	sbrc	r21, 7
 6da:	90 58       	subi	r25, 0x80	; 128
 6dc:	44 0f       	add	r20, r20
 6de:	55 1f       	adc	r21, r21
 6e0:	59 f0       	breq	.+22     	; 0x6f8 <__fp_splitA+0x10>
 6e2:	5f 3f       	cpi	r21, 0xFF	; 255
 6e4:	71 f0       	breq	.+28     	; 0x702 <__fp_splitA+0x1a>
 6e6:	47 95       	ror	r20

000006e8 <__fp_splitA>:
 6e8:	88 0f       	add	r24, r24
 6ea:	97 fb       	bst	r25, 7
 6ec:	99 1f       	adc	r25, r25
 6ee:	61 f0       	breq	.+24     	; 0x708 <__fp_splitA+0x20>
 6f0:	9f 3f       	cpi	r25, 0xFF	; 255
 6f2:	79 f0       	breq	.+30     	; 0x712 <__fp_splitA+0x2a>
 6f4:	87 95       	ror	r24
 6f6:	08 95       	ret
 6f8:	12 16       	cp	r1, r18
 6fa:	13 06       	cpc	r1, r19
 6fc:	14 06       	cpc	r1, r20
 6fe:	55 1f       	adc	r21, r21
 700:	f2 cf       	rjmp	.-28     	; 0x6e6 <__fp_split3+0xe>
 702:	46 95       	lsr	r20
 704:	f1 df       	rcall	.-30     	; 0x6e8 <__fp_splitA>
 706:	08 c0       	rjmp	.+16     	; 0x718 <__fp_splitA+0x30>
 708:	16 16       	cp	r1, r22
 70a:	17 06       	cpc	r1, r23
 70c:	18 06       	cpc	r1, r24
 70e:	99 1f       	adc	r25, r25
 710:	f1 cf       	rjmp	.-30     	; 0x6f4 <__fp_splitA+0xc>
 712:	86 95       	lsr	r24
 714:	71 05       	cpc	r23, r1
 716:	61 05       	cpc	r22, r1
 718:	08 94       	sec
 71a:	08 95       	ret

0000071c <__fp_zero>:
 71c:	e8 94       	clt

0000071e <__fp_szero>:
 71e:	bb 27       	eor	r27, r27
 720:	66 27       	eor	r22, r22
 722:	77 27       	eor	r23, r23
 724:	cb 01       	movw	r24, r22
 726:	97 f9       	bld	r25, 7
 728:	08 95       	ret

0000072a <__gesf2>:
 72a:	0e 94 20 03 	call	0x640	; 0x640 <__fp_cmp>
 72e:	08 f4       	brcc	.+2      	; 0x732 <__gesf2+0x8>
 730:	8f ef       	ldi	r24, 0xFF	; 255
 732:	08 95       	ret

00000734 <__udivmodsi4>:
 734:	a1 e2       	ldi	r26, 0x21	; 33
 736:	1a 2e       	mov	r1, r26
 738:	aa 1b       	sub	r26, r26
 73a:	bb 1b       	sub	r27, r27
 73c:	fd 01       	movw	r30, r26
 73e:	0d c0       	rjmp	.+26     	; 0x75a <__udivmodsi4_ep>

00000740 <__udivmodsi4_loop>:
 740:	aa 1f       	adc	r26, r26
 742:	bb 1f       	adc	r27, r27
 744:	ee 1f       	adc	r30, r30
 746:	ff 1f       	adc	r31, r31
 748:	a2 17       	cp	r26, r18
 74a:	b3 07       	cpc	r27, r19
 74c:	e4 07       	cpc	r30, r20
 74e:	f5 07       	cpc	r31, r21
 750:	20 f0       	brcs	.+8      	; 0x75a <__udivmodsi4_ep>
 752:	a2 1b       	sub	r26, r18
 754:	b3 0b       	sbc	r27, r19
 756:	e4 0b       	sbc	r30, r20
 758:	f5 0b       	sbc	r31, r21

0000075a <__udivmodsi4_ep>:
 75a:	66 1f       	adc	r22, r22
 75c:	77 1f       	adc	r23, r23
 75e:	88 1f       	adc	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	1a 94       	dec	r1
 764:	69 f7       	brne	.-38     	; 0x740 <__udivmodsi4_loop>
 766:	60 95       	com	r22
 768:	70 95       	com	r23
 76a:	80 95       	com	r24
 76c:	90 95       	com	r25
 76e:	9b 01       	movw	r18, r22
 770:	ac 01       	movw	r20, r24
 772:	bd 01       	movw	r22, r26
 774:	cf 01       	movw	r24, r30
 776:	08 95       	ret

00000778 <__tablejump2__>:
 778:	ee 0f       	add	r30, r30
 77a:	ff 1f       	adc	r31, r31
 77c:	05 90       	lpm	r0, Z+
 77e:	f4 91       	lpm	r31, Z
 780:	e0 2d       	mov	r30, r0
 782:	09 94       	ijmp

00000784 <_exit>:
 784:	f8 94       	cli

00000786 <__stop_program>:
 786:	ff cf       	rjmp	.-2      	; 0x786 <__stop_program>
